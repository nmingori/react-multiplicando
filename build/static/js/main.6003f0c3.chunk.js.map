{"version":3,"sources":["components/images/back.svg","components/images/refresh.svg","components/game-status.ts","components/lives.tsx","components/keyboard.tsx","components/display-secret-word.tsx","components/menu.tsx","services/word-service.ts","components/game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","GameStatus","Lives","playerLives","maxLives","useState","livesToShow","setLivesToShow","useEffect","lives","i","push","className","map","live","key","style","opacity","letterKeys","split","Keyboard","pressNewLetter","usedLetters","letterKey","includes","isInUsedLetters","type","onClick","length","join","Categories","DisplaySecretWord","secretWord","gameStatus","setGameStatus","wordOutput","setWordOutput","output","toUpperCase","letter","WIN","letterStyle","menuCategories","title","categories","FRUTAS","OBJETOS","ANIMALES","ENG_BODY_PARTS","ENG_COLOURS","ENG_DAYS_OF_THE_WEEK","Menu","setCategory","categoryGroup","categoryName","WordService","category","wordsList","words_frutas","words","words_objetos","words_animales","words_eng_body_parts","words_eng_colours","words_eng_days_of_the_week","this","_getWordsListByCaterogy","Math","floor","random","Game","wordService","setUsedLetters","PLAYING","word","setSecretWord","getWordByCategory","setPlayerLives","LOOSE","newLetter","translate","src","iconRefresh","alt","height","iconBack","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6003f0c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back.c9dda606.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh.c98e1c22.svg\";","export enum GameStatus {\n    PLAYING = \"Jugando\",\n    WIN = \"Ganaste\",\n    LOOSE = \"Perdiste\"\n}","import * as React from 'react';\nimport {useEffect, useState} from 'react';\n\nconst Lives = ({playerLives, maxLives}: any) => {\n\n    const [livesToShow, setLivesToShow] = useState<boolean[]>([]);\n\n    useEffect(() => {\n        let lives = [];\n        for (var i = 0; i < maxLives; i++) {\n            lives.push(i < playerLives);\n        }\n        setLivesToShow(lives)\n    }, [maxLives, playerLives]);\n\n    return (\n        <div className=\"d-flex justify-content-center mb-4\">\n            <strong className=\"mr-1\">Vidas:</strong>\n\n            {livesToShow.map((live, i) => (\n                <span key={i}>\n                    {(live === true) ? (\n                        <span>&#x2764;&#xFE0F;</span>\n                    ) : (\n                        <span style={{opacity:'.5'}}>&#x1F5A4;</span>\n                    )}\n                </span>\n            ))}\n        </div>\n    )\n}\n\nexport default Lives;","import * as React from 'react';\n\nconst letterKeys:string[] = 'AÁBCDEÉFGHIÍJKLMNÑOÓPQRSTUÚVWXYZ'.split(\"\");\n\nconst Keyboard = ({pressNewLetter, usedLetters}: any) => {\n\n    const isInUsedLetters = (letterKey: string): boolean => {\n        return usedLetters.includes(letterKey);\n    }\n    return (\n        <div className=\"mb-4\">\n            {letterKeys.map(letterKey => \n                (!isInUsedLetters(letterKey) &&\n                    <button type=\"button\" className=\"btn btn-outline-primary m-1\" onClick={() => pressNewLetter(letterKey)} key={letterKey}>{letterKey}</button>  \n                )  \n            )}\n\n            {(usedLetters.length > 0) && \n                <div className=\"d-flex justify-content-center mt-2\">\n                    <strong className=\"mr-1\">Letras utilizadas:</strong>{usedLetters.join(\" - \")}\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Keyboard;","import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport { GameStatus } from './game-status';\n\nconst DisplaySecretWord = ({secretWord, usedLetters, gameStatus, setGameStatus}: any) => {\n   \n    const [wordOutput, setWordOutput] = useState<string[]>([]);\n\n    useEffect(() => {\n        const output = secretWord.toUpperCase().split(\"\").map((letter: string, i: number) => {\n            if (i === 0) return letter.toUpperCase();\n\n            if (usedLetters.includes(letter.toUpperCase())) {\n                return letter;\n            } else {\n                return \"-\";\n            }\n        });\n        \n        if (output.length > 1 && !output.includes(\"-\")) setGameStatus(GameStatus.WIN);\n\n        setWordOutput(output);\n    }, [secretWord, usedLetters]);\n   \n    const letterStyle = (letter: string): string => {\n        if (gameStatus === GameStatus.WIN) {\n            return \"btn-success\";\n        }\n\n        return (letter !== \"-\") ? \"btn-danger\" : \"btn-outline-danger\";\n    }\n\n    return (\n        <div className=\"btn-group mb-4\">\n            {wordOutput.map((letter, i) => (\n                <button type=\"button\" className={`btn ${letterStyle(letter)} btn-sm`} key={i}>{letter}</button>\n            ))}\n        </div>\n    )\n}\n\nexport default DisplaySecretWord;","import * as React from 'react';\n\nexport enum Categories {\n    FRUTAS = \"Frutas o verduras\",\n    OBJETOS = \"Objetos\",\n    ANIMALES = \"Animales\",\n\n    ENG_BODY_PARTS = \"Body Parts (Partes del cuerpo)\",\n    ENG_COLOURS = \"Colours (Colores)\",\n    ENG_DAYS_OF_THE_WEEK = \"Days of the week (Días de la semana)\"\n}\n\ninterface CategoryGroup {\n    title: string;\n    categories: Categories[];\n}\n\nconst menuCategories:CategoryGroup[] = [\n    {\n        title: \"Español:\",\n        categories: [\n            Categories.FRUTAS, Categories.OBJETOS, Categories.ANIMALES\n        ]\n    },\n    {\n        title: \"Inglés:\",\n        categories: [\n            Categories.ENG_BODY_PARTS, Categories.ENG_COLOURS, Categories.ENG_DAYS_OF_THE_WEEK\n        ]\n    }\n];\n\nconst Menu = ({setCategory}: any) => {\n\n    return (\n        <div className=\"container\">\n            <h2 className=\"mb-4\">Palabras</h2>\n\n            {menuCategories.map(categoryGroup => (\n                <div className=\"row justify-content-center mb-4\" key={categoryGroup.title} >\n                    <div className=\"d-flex flex-column\">\n                        <h5>{categoryGroup.title}</h5>\n\n                        {categoryGroup.categories.map(categoryName => (\n                            <button type=\"button\" className=\"btn btn-primary mb-1\"onClick={() => setCategory(categoryName)} key={categoryName}>{categoryName}</button>\n                        ))}                     \n                    </div>\n                </div> \n\n            ))}\n        </div>\n    )\n}\n\nexport default Menu;","import words_frutas from '../data/words_frutas_verduras.json';\nimport words_objetos from '../data/words_objetos.json';\nimport words_animales from '../data/words_animales.json';\nimport words_eng_body_parts from '../data/words_eng_body_parts.json';\nimport words_eng_colours from '../data/words_eng_colours.json';\nimport words_eng_days_of_the_week from '../data/words_eng_days_of_the_week.json';\nimport {Categories} from '../components/menu';\n\nexport interface Word {\n    word: string;\n    translate?: string;\n}\n\nexport class WordService {\n    _getWordsListByCaterogy(category: Categories): Word[] {\n        let wordsList: Word[] = [];\n\n        switch (category) {\n            case Categories.FRUTAS:\n                wordsList = words_frutas.words;\n                break;\n            case Categories.OBJETOS:\n                wordsList = words_objetos.words;\n                break;    \n            case Categories.ANIMALES:\n                wordsList = words_animales.words;\n                break;\n            case Categories.ENG_BODY_PARTS:\n                wordsList = words_eng_body_parts.words;\n                break;\n            case Categories.ENG_COLOURS:\n                wordsList = words_eng_colours.words;\n                break;\n            case Categories.ENG_DAYS_OF_THE_WEEK:\n                wordsList = words_eng_days_of_the_week.words;\n                break;\n        }\n\n        return wordsList;\n    }\n\n    getWordByCategory(category: Categories): Word {\n        let words: Word[] = this._getWordsListByCaterogy(category);\n        return words[Math.floor(Math.random() * words.length)];\n    }\n}","import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport Lives from './lives';\nimport Keyboard from './keyboard';\nimport DisplaySecretWord from './display-secret-word';\nimport {WordService, Word} from '../services/word-service';\nimport {GameStatus} from './game-status';\nimport iconBack from './images/back.svg';\nimport iconRefresh from './images/refresh.svg';\n\n\nconst MAX_LIVES = 5;\n\nconst Game = ({category, setCategory}: any) => {\n    \n    const wordService = new WordService();\n\n    const [usedLetters, setUsedLetters] = useState<string[]>([]);\n    const [gameStatus, setGameStatus] = useState<GameStatus>(GameStatus.PLAYING);\n\n    const [secretWord, setSecretWord] = useState<Word>({word:\"\"});\n    useEffect(() => {\n        setSecretWord(wordService.getWordByCategory(category));       \n    }, []);\n\n    const [playerLives, setPlayerLives] = useState<number>(MAX_LIVES);\n    useEffect(() => {\n        if (playerLives === 0) setGameStatus(GameStatus.LOOSE);       \n    }, [playerLives]);\n\n    const pressNewLetter = (newLetter:string) => {\n        if (!secretWord.word.includes(newLetter)) setPlayerLives(playerLives - 1);\n        \n        setUsedLetters([...usedLetters, newLetter]);\n    }\n\n    const retryInCategory = () => {\n        setSecretWord(wordService.getWordByCategory(category)); \n        setPlayerLives(MAX_LIVES);\n        setGameStatus(GameStatus.PLAYING);\n        setUsedLetters([]);\n    };\n\n    return (\n        <>\n            <div>\n\n                <div className=\"d-flex justify-content-center\"><strong className=\"mr-1\">Categoría:</strong>{category}</div>\n\n                <Lives playerLives={playerLives} maxLives={MAX_LIVES} />\n\n                <div>\n                    <DisplaySecretWord usedLetters={usedLetters} secretWord={secretWord.word} gameStatus={gameStatus} setGameStatus={setGameStatus} />\n\n                    {(gameStatus === GameStatus.PLAYING) && \n                        <>\n                            <Keyboard pressNewLetter={pressNewLetter} usedLetters={usedLetters} />\n\n                            {(playerLives === 1) &&\n                                <p>Te queda una sola vida!!</p>\n                            }\n                        </>     \n                    }\n                </div>\n            \n                {(gameStatus !== GameStatus.PLAYING) &&\n                    <div>\n                        <p>{gameStatus}</p>\n\n                        {(gameStatus === GameStatus.LOOSE) && \n                            <p>La palabra era <strong>{secretWord.word} {secretWord.translate && <span>({secretWord.translate})</span>}</strong></p>\n                        }\n\n                        <button type=\"button\" className=\"btn btn-outline-dark btn-sm mb-3\" onClick={() => retryInCategory()}><img src={iconRefresh} alt=\"refresh\" style={{height: \"18px\"}}/> Volver a jugar</button>\n                    </div>\n                }\n\n                <button type=\"button\" className=\"btn btn-outline-dark btn-sm\" onClick={() => setCategory(null)}><img src={iconBack} alt=\"back\" style={{height: \"18px\"}}/>  Volver al Menú</button>\n            </div>\n        </>\n    )\n}\n\nexport default Game;","import * as React from 'react';\nimport './App.css';\nimport {useState} from 'react';\nimport Game from './components/game';\nimport Menu, {Categories} from './components/menu';\n\nconst App = () => {\n    \n    const [category, setCategory] = useState<Categories|null>(null);\n    \n    return (\n        <>\n            {(category) ? (\n                <div>\n                    <Game category={category} setCategory={setCategory} />\n                </div>\n            ) : (\n                <Menu setCategory={setCategory} />\n            )}\n        </>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}